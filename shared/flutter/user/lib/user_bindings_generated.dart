// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/user.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class UserBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UserBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UserBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<BOOL> _TRUE = _lookup<BOOL>('TRUE');

  int get TRUE => _TRUE.value;

  set TRUE(int value) => _TRUE.value = value;

  late final ffi.Pointer<BOOL> _FALSE = _lookup<BOOL>('FALSE');

  int get FALSE => _FALSE.value;

  set FALSE(int value) => _FALSE.value = value;

  ffi.Pointer<ffi.Void> GreeterNewGreeter(
    ffi.Pointer<printer_t> h_printer,
  ) {
    return _GreeterNewGreeter(
      h_printer,
    );
  }

  late final _GreeterNewGreeterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<printer_t>)>>('GreeterNewGreeter');
  late final _GreeterNewGreeter = _GreeterNewGreeterPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<printer_t>)>();

  void GreeterFreeGreeter(
    ffi.Pointer<ffi.Void> go_greeter,
  ) {
    return _GreeterFreeGreeter(
      go_greeter,
    );
  }

  late final _GreeterFreeGreeterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'GreeterFreeGreeter');
  late final _GreeterFreeGreeter =
      _GreeterFreeGreeterPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void GreeterGreet(
    ffi.Pointer<ffi.Void> go_greeter,
    ffi.Pointer<ffi.Void> go_person,
  ) {
    return _GreeterGreet(
      go_greeter,
      go_person,
    );
  }

  late final _GreeterGreetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('GreeterGreet');
  late final _GreeterGreet = _GreeterGreetPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> PersonNewPerson(
    ffi.Pointer<identity_t> h_identity,
  ) {
    return _PersonNewPerson(
      h_identity,
    );
  }

  late final _PersonNewPersonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<identity_t>)>>('PersonNewPerson');
  late final _PersonNewPerson = _PersonNewPersonPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<identity_t>)>();

  void PersonFreePerson(
    ffi.Pointer<ffi.Void> go_person,
  ) {
    return _PersonFreePerson(
      go_person,
    );
  }

  late final _PersonFreePersonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'PersonFreePerson');
  late final _PersonFreePerson =
      _PersonFreePersonPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void PersonAge(
    ffi.Pointer<ffi.Void> go_person,
  ) {
    return _PersonAge(
      go_person,
    );
  }

  late final _PersonAgePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'PersonAge');
  late final _PersonAge =
      _PersonAgePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  int sum_with_callback(
    int context,
    callback_t callback,
    int a,
    int b,
  ) {
    return _sum_with_callback(
      context,
      callback,
      a,
      b,
    );
  }

  late final _sum_with_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int64, callback_t, ffi.Int32,
              ffi.Int32)>>('sum_with_callback');
  late final _sum_with_callback = _sum_with_callbackPtr
      .asFunction<int Function(int, callback_t, int, int)>();
}

typedef BOOL = ffi.UnsignedChar;

final class printer_t extends ffi.Struct {
  @ffi.Int64()
  external int context;

  external print_something_t printSomething;
}

/// Printer interface client reference
typedef print_something_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Char>)>>;

final class identity_t extends ffi.Struct {
  @ffi.Int64()
  external int context;

  external username_t username;
}

/// Identity interface client reference
typedef username_t = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int64)>>;

/// A simple sum function with a callback with the result
typedef callback_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64, ffi.Int32)>>;
